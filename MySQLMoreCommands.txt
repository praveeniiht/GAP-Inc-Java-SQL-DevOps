CASE statement
--------------
syntax
------
CASE
    WHEN condition1 THEN result1
    WHEN condition2 THEN result2
    WHEN conditionN THEN resultN
    ELSE result
END;


SELECT ename, sal,
CASE
    when sal >=1000 and sal<=2000 then 'Low salary'
	when sal >2000 and sal<=3000 then 'average salary'
    when sal >=3000 and sal <4000 then 'high salary'
	when sal >=4000 then 'extemely high'
    ELSE "very low salary"
END
FROM emp; 



Autoincrement feature
----------------------
CREATE TABLE gapemployees (
    emp_no INT  AUTO_INCREMENT PRIMARY KEY,
    first_name VARCHAR(50),
    last_name VARCHAR(50)
);

INSERT INTO gapemployees(first_name,last_name) VALUES('John','Doe');
INSERT INTO gapemployees(first_name,last_name) VALUES('Mary','Jane');


DELETE FROM employees WHERE emp_no = 2;

INSERT INTO employees(first_name,last_name) VALUES('Jack','Lee');

you will observe entry as below:
1 John Doe
3 Jack Lee


Boolean Type
------------
CREATE TABLE tasks (
    id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    completed BOOLEAN
);

INSERT INTO tasks(title,completed) VALUES('Master MySQL Boolean type',true);
INSERT INTO tasks(title,completed) VALUES('Design database table',false); 

SELECT 
    id, 
    title, 
    IF(completed, 'true', 'false') completed
FROM
    tasks;

Text type
---------
MySQL provides four TEXT types: TINYTEXT, TEXT, MEDIUMTEXT, and LONGTEXT

TINYTEXT – 255 Bytes (255 characters)  -- varchar(255);
TEXT – 64KB (65,535 characters)
MEDIUMTEXT – 16MB (16,777,215 characters)
LONGTEXT – 4GB (4,294,967,295 characters)


CREATE TABLE articles (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255),
    summary TEXT
);


Json type
---------
CREATE TABLE table_name (
    ...
    json_column_name JSON,
    ... 
); 

[ {
	"name":"Bangalore",
	 "min":22,
     "max":27
  },
  {
	"name":"Hyderabad",
    "min":29,
	"max":31
   }
]

<cities>
	<city>
		<name>Bangalore</name>
		<min>22</min>
		<max>27</max>
	</city>
	<city>
		<name>Hyderabad</name>
		<min>29</min>
		<max>31</max>
	</city>
</cities>





CREATE TABLE events( 
  id int auto_increment primary key, 
  event_name varchar(255), 
  visitor varchar(255), 
  properties json, 
  browser json
);





INSERT INTO events(event_name, visitor,properties, browser) 
VALUES (
  'pageview', 
   '1',
   '{ "page": "/" }',
   '{ "name": "Safari", "os": "Mac", "resolution": { "x": 1920, "y": 1080 } }'
),
('pageview', 
  '2',
  '{ "page": "/contact" }',
  '{ "name": "Firefox", "os": "Windows", "resolution": { "x": 2560, "y": 1600 } }'
),
(
  'pageview', 
  '1',
  '{ "page": "/products" }',
  '{ "name": "Safari", "os": "Mac", "resolution": { "x": 1920, "y": 1080 } }'
),
(
  'purchase', 
   '3',
  '{ "amount": 200 }',
  '{ "name": "Firefox", "os": "Windows", "resolution": { "x": 1600, "y": 900 } }'
),
(
  'purchase', 
   '4',
  '{ "amount": 150 }',
  '{ "name": "Firefox", "os": "Windows", "resolution": { "x": 1280, "y": 800 } }'
),
(
  'purchase', 
  '4',
  '{ "amount": 500 }',
  '{ "name": "Chrome", "os": "Windows", "resolution": { "x": 1680, "y": 1050 } }'
);


SELECT id, browser->'$.name' browser FROM events;

SELECT browser->>'$.name' browser, 
      count(browser)
FROM events
GROUP BY browser->>'$.name';

To calculate the total revenue by the visitor
---------------------------------------------
SELECT visitor, SUM(properties->>'$.amount') revenue
FROM events
WHERE properties->>'$.amount' > 0
GROUP BY visitor;
